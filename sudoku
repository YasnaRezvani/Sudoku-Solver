/*
 * sudoku.cpp
 *
 * This program solves Sudoku puzzles and generates random unsolved Sudokus for the user to test out.
 * It uses a backtracking algorithm to efficiently solve any Sudoku grid.
 *
 * Author: Yasna Rezvani
 * Date: June 24, 2023
 */

#include <iostream>
#include <vector>
#include <random>
#include <algorithm>

using namespace std;

//Method declarations
bool solvePuzzle(vector<vector<int>>& puzzle);
bool isValid(const vector<vector<int>>& puzzle, int row, int col, int n);
void displayPuzzle(const vector<vector<int>>& puzzle);
void generateSudoku(vector<vector<int>>& puzzle);

/*
 * The purpose of this program is to create an algorithm that can input any unsolved
 * Sudoku puzzle and output a solved version of the Sudoku, if mathematically possible.
 */
int main() {
    vector<vector<int>> puzzle(9, vector<int>(9, 0));   //a 2D vector to represent sudoku grid

    int option;
    do {
        cout << "Menu:" << endl;
        cout << "1. Generate New Sudoku" << endl;
        cout << "2. Solve Sudoku" << endl;
        cout << "3. Input Custom Sudoku" << endl;
        cout << "4. Quit" << endl;
        cout << "Enter your choice: ";
        cin >> option;

        switch (option) {
        case 1:
            cout << endl << "New Sudoku:" << endl;
            generateSudoku(puzzle); //generate a random sudoku grid
            displayPuzzle(puzzle); //display unsolved puzzle
            break;
        case 2:
            if (solvePuzzle(puzzle)) {
                cout << endl << "Sudoku solved!" << endl;
                displayPuzzle(puzzle);  //display solved puzzle
            }
            else
                cout << "Unable to solve Sudoku." << endl;
            break;
        case 3:
            cout << "Enter your custom Sudoku puzzle (9x9 grid):" << endl;
            for (int i = 0; i < puzzle.size(); i++) {
                for (int j = 0; j < puzzle[i].size(); j++) {
                    cin >> puzzle[i][j];
                }
            }
            displayPuzzle(puzzle);
            break;
        case 4:
            cout << "Exiting..." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }
        cout << endl;

    } while (option != 4);
    return 0;
}

/*
 * Solves the Sudoku puzzle recursively. Finds every empty cell from the given Sudoku
 * and replaces it with a valid number according to the laws of Sudoku. Backtracking
 * portion begins when an earlier assumption of a valid number was incorrect. Recursive
 * calls continue until a solvable solution can be found.
 *
 * @param puzzle The 2D vector representing the Sudoku puzzle.
 * @return Returns true if it's a solvable sudoku, false otherwise.
 */
bool solvePuzzle(vector<vector<int>>& puzzle) {
    mt19937 generator(random_device{}()); //declare generator to pass it in shuffle method

    //double for-loop goes through each cell of the puzzle and checks if it's empty
    for (int i = 0; i < puzzle.size(); i++) {
        for (int j = 0; j < puzzle[i].size(); j++) {
            if (puzzle[i][j] == 0) {    //if there's an empty cell

                vector<int> OneToNine = { 1,2,3,4,5,6,7,8,9 }; //a vector of the potential values

                //the for loop can't start from n=1 every time
                //a shuffle is used to change the order of the vector
                shuffle(OneToNine.begin(), OneToNine.end(), generator);
                for (int n : OneToNine) {  //go through all possible values (1-9)

                    //assign n to the cell if it's a valid number according to sudoku rules
                    if (isValid(puzzle, i, j, n)) {
                        puzzle[i][j] = n;

                        //recursive call to continue finding empty cells
                        //if a solution is found return true
                        if (solvePuzzle(puzzle))
                            return true;

                        /*code will reach here when the recursive call leads to return false
                        * in this case, we need to backtrack to find a different number
                        * therefore, the current cell is set to "0" so it's treated like an empty cell
                        * this event occurs when our assumption of an earlier number in a sudoku cell is wrong
                        */
                        puzzle[i][j] = 0;
                    }
                }
                //if code reaches here, numbers 1-9 were not valid
                return false;
            }
        }
    }
    //method can return true now that all cells have been filled with valid numbers (1-9)
    return true;
}

/* Checks if given number (n) matches a number in the same column, row, or subgrid
*
* @param puzzle The 2D vector for the sudoku puzzle.
* @param row The row of number (n).
* @param col The column of number (n).
* @param n  The number being checked (1-9).
* @return Returns true if the number (n) is valid, false otherwise.
*/
bool isValid(const vector<vector<int>>& puzzle, int row, int col, int n) {

    //if number matches with a cell in col
    for (int i = 0; i < puzzle.size(); i++) {
        if (n == puzzle[i][col])
            return false;
    }

    //if number(n) matches with a cell in row
    for (int j = 0; j < puzzle[row].size(); j++) {
        if (n == puzzle[row][j])
            return false;
    }

    //find if number(n) is within its own cell

    //int division by 3 and then multiplying by 3
    //this brings us back to first row/col in that subgrid 
    int subgridRow = (row / 3) * 3;
    int subgridCol = (col / 3) * 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {

            //if any of the numbers in the subgrid matches number(n)
            if (puzzle[subgridRow + i][subgridCol + j] == n)
                return false;
        }
    }
    //if code reaches this far, n must be valid
    return true;
}

/*
* Displays the Sudoku numbers in a separated manner. Uses horizontal and
* vertical dashes to divide Sudoku into subgrids.
*
* @param puzzle The 2D vector representing the Sudoku.
*/
void displayPuzzle(const vector<vector<int>>& puzzle) {
    
    // double for-loop for 2D vector
    for (int i = 0; i < puzzle.size(); i++) {

        //separate subgrids with horizontal and vertical dashes
        //separation must happen after 3, and again after 6
        if (i == 3 || i == 6)
            cout << "------|-------|------" << "\n";

        // counter to set vertical lines between each subgrid
        int counter = 0;
        for (int j = 0; j < puzzle[0].size(); j++) {

            //set a vertical line to organize between each subgrid
            if (counter == 3) {
                cout << "| ";
                counter = 0;
            }

            //if grid space is 0, display extra space
            if (puzzle[i][j] == 0)
                cout << "  ";

            //else, display given number with a space
            else
                cout << puzzle[i][j] << " ";

            counter++; //increment 
        }
        cout << "\n";   //go to next row appropriately
    }
}

/*
 * Generates a random unsolved Sudoku puzzle. Creates a new Sudoku
 * puzzle by first solving a completely filled puzzle and then removing
 * 40 cells to create some difficulty. The generated puzzle
 * is stored in the provided 2D vector 'puzzle'.
 *
 * @param puzzle The 2D vector to store the generated Sudoku puzzle. The given puzzle is an empty grid.
 * @param generate The random number engine. This guarantees the randomness of the generation.
 */
void generateSudoku(vector<vector<int>>& puzzle) {
    mt19937 generator(random_device{}());
    uniform_int_distribution<int> distrib(1, 9); //gives random values from 1-9, inclusive

    int emptyCells = 40; //variable to remove 40 cells

    //while there are still cells to remove
    while (emptyCells != 0) {
        puzzle = vector<vector<int>>(9, vector<int>(9, 0)); // Reset the puzzle to an empty grid

        // Fill the entire puzzle
        if (solvePuzzle(puzzle)) {

            vector<vector<int>> copyOfPuzzle = puzzle; //copy of puzzle, so it can be reset in next generations

            //while there are still cells to remove
            while (emptyCells != 0) {

                //random row and column variables [0-8]
                int row = distrib(generator) % 9;
                int col = distrib(generator) % 9;

                if (copyOfPuzzle[row][col] != 0) {
                    int value = copyOfPuzzle[row][col]; //variable for value

                    copyOfPuzzle[row][col] = 0; //set the cell to 0 to represent empty cell

                    //sudoku puzzle must still be solvable
                    if (solvePuzzle(copyOfPuzzle)) {
                        puzzle[row][col] = 0; //now original puzzle can be set to 0
                        emptyCells--; //decrement cells to remove
                    }

                    //when sudoku puzzle isn't solvable, give back original value
                    else
                        copyOfPuzzle[row][col] = value;
                }
            }
        }
    }
}
